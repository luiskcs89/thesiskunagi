// ----------> GENERATED FILE - DON'T TOUCH! <----------

// generator: ilarkesto.mda.legacy.generator.DaoGenerator










package scrum.server.project;

import java.util.*;
import ilarkesto.core.logging.Log;
import ilarkesto.auth.Auth;
import ilarkesto.base.Cache;
import ilarkesto.persistence.EntityEvent;
import ilarkesto.fp.Predicate;

public abstract class GUsabilityRecommnendationDao
            extends ilarkesto.persistence.ADao<UsabilityRecommnendation> {

    public final String getEntityName() {
        return UsabilityRecommnendation.TYPE;
    }

    public final Class getEntityClass() {
        return UsabilityRecommnendation.class;
    }

    public Set<UsabilityRecommnendation> getEntitiesVisibleForUser(final scrum.server.admin.User user) {
        return getEntities(new Predicate<UsabilityRecommnendation>() {
            public boolean test(UsabilityRecommnendation e) {
                return Auth.isVisible(e, user);
            }
        });
    }

    // --- clear caches ---
    public void clearCaches() {
        usabilityRecommnendationsByProjectCache.clear();
        projectsCache = null;
        usabilityRecommnendationsByNumberCache.clear();
        numbersCache = null;
        usabilityRecommnendationsByDecriptionCache.clear();
        decriptionsCache = null;
        usabilityRecommnendationsByCreatesCache.clear();
        usabilityRecommnendationsByModifiesCache.clear();
        usabilityRecommnendationsByEntityAffectedCache.clear();
        entityAffectedsCache = null;
        usabilityRecommnendationsByUsabilityMechanismCache.clear();
        usabilityMechanismsCache = null;
    }

    @Override
    public void entityDeleted(EntityEvent event) {
        super.entityDeleted(event);
        if (event.getEntity() instanceof UsabilityRecommnendation) {
            clearCaches();
        }
    }

    @Override
    public void entitySaved(EntityEvent event) {
        super.entitySaved(event);
        if (event.getEntity() instanceof UsabilityRecommnendation) {
            clearCaches();
        }
    }

    // -----------------------------------------------------------
    // - project
    // -----------------------------------------------------------

    private final Cache<scrum.server.project.Project,Set<UsabilityRecommnendation>> usabilityRecommnendationsByProjectCache = new Cache<scrum.server.project.Project,Set<UsabilityRecommnendation>>(
            new Cache.Factory<scrum.server.project.Project,Set<UsabilityRecommnendation>>() {
                public Set<UsabilityRecommnendation> create(scrum.server.project.Project project) {
                    return getEntities(new IsProject(project));
                }
            });

    public final Set<UsabilityRecommnendation> getUsabilityRecommnendationsByProject(scrum.server.project.Project project) {
        return new HashSet<UsabilityRecommnendation>(usabilityRecommnendationsByProjectCache.get(project));
    }
    private Set<scrum.server.project.Project> projectsCache;

    public final Set<scrum.server.project.Project> getProjects() {
        if (projectsCache == null) {
            projectsCache = new HashSet<scrum.server.project.Project>();
            for (UsabilityRecommnendation e : getEntities()) {
                if (e.isProjectSet()) projectsCache.add(e.getProject());
            }
        }
        return projectsCache;
    }

    private static class IsProject implements Predicate<UsabilityRecommnendation> {

        private scrum.server.project.Project value;

        public IsProject(scrum.server.project.Project value) {
            this.value = value;
        }

        public boolean test(UsabilityRecommnendation e) {
            return e.isProject(value);
        }

    }

    // -----------------------------------------------------------
    // - number
    // -----------------------------------------------------------

    private final Cache<Integer,Set<UsabilityRecommnendation>> usabilityRecommnendationsByNumberCache = new Cache<Integer,Set<UsabilityRecommnendation>>(
            new Cache.Factory<Integer,Set<UsabilityRecommnendation>>() {
                public Set<UsabilityRecommnendation> create(Integer number) {
                    return getEntities(new IsNumber(number));
                }
            });

    public final Set<UsabilityRecommnendation> getUsabilityRecommnendationsByNumber(int number) {
        return new HashSet<UsabilityRecommnendation>(usabilityRecommnendationsByNumberCache.get(number));
    }
    private Set<Integer> numbersCache;

    public final Set<Integer> getNumbers() {
        if (numbersCache == null) {
            numbersCache = new HashSet<Integer>();
            for (UsabilityRecommnendation e : getEntities()) {
                numbersCache.add(e.getNumber());
            }
        }
        return numbersCache;
    }

    private static class IsNumber implements Predicate<UsabilityRecommnendation> {

        private int value;

        public IsNumber(int value) {
            this.value = value;
        }

        public boolean test(UsabilityRecommnendation e) {
            return e.isNumber(value);
        }

    }

    // -----------------------------------------------------------
    // - decription
    // -----------------------------------------------------------

    private final Cache<java.lang.String,Set<UsabilityRecommnendation>> usabilityRecommnendationsByDecriptionCache = new Cache<java.lang.String,Set<UsabilityRecommnendation>>(
            new Cache.Factory<java.lang.String,Set<UsabilityRecommnendation>>() {
                public Set<UsabilityRecommnendation> create(java.lang.String decription) {
                    return getEntities(new IsDecription(decription));
                }
            });

    public final Set<UsabilityRecommnendation> getUsabilityRecommnendationsByDecription(java.lang.String decription) {
        return new HashSet<UsabilityRecommnendation>(usabilityRecommnendationsByDecriptionCache.get(decription));
    }
    private Set<java.lang.String> decriptionsCache;

    public final Set<java.lang.String> getDecriptions() {
        if (decriptionsCache == null) {
            decriptionsCache = new HashSet<java.lang.String>();
            for (UsabilityRecommnendation e : getEntities()) {
                if (e.isDecriptionSet()) decriptionsCache.add(e.getDecription());
            }
        }
        return decriptionsCache;
    }

    private static class IsDecription implements Predicate<UsabilityRecommnendation> {

        private java.lang.String value;

        public IsDecription(java.lang.String value) {
            this.value = value;
        }

        public boolean test(UsabilityRecommnendation e) {
            return e.isDecription(value);
        }

    }

    // -----------------------------------------------------------
    // - creates
    // -----------------------------------------------------------

    private final Cache<Boolean,Set<UsabilityRecommnendation>> usabilityRecommnendationsByCreatesCache = new Cache<Boolean,Set<UsabilityRecommnendation>>(
            new Cache.Factory<Boolean,Set<UsabilityRecommnendation>>() {
                public Set<UsabilityRecommnendation> create(Boolean creates) {
                    return getEntities(new IsCreates(creates));
                }
            });

    public final Set<UsabilityRecommnendation> getUsabilityRecommnendationsByCreates(boolean creates) {
        return new HashSet<UsabilityRecommnendation>(usabilityRecommnendationsByCreatesCache.get(creates));
    }

    private static class IsCreates implements Predicate<UsabilityRecommnendation> {

        private boolean value;

        public IsCreates(boolean value) {
            this.value = value;
        }

        public boolean test(UsabilityRecommnendation e) {
            return value == e.isCreates();
        }

    }

    // -----------------------------------------------------------
    // - modifies
    // -----------------------------------------------------------

    private final Cache<Boolean,Set<UsabilityRecommnendation>> usabilityRecommnendationsByModifiesCache = new Cache<Boolean,Set<UsabilityRecommnendation>>(
            new Cache.Factory<Boolean,Set<UsabilityRecommnendation>>() {
                public Set<UsabilityRecommnendation> create(Boolean modifies) {
                    return getEntities(new IsModifies(modifies));
                }
            });

    public final Set<UsabilityRecommnendation> getUsabilityRecommnendationsByModifies(boolean modifies) {
        return new HashSet<UsabilityRecommnendation>(usabilityRecommnendationsByModifiesCache.get(modifies));
    }

    private static class IsModifies implements Predicate<UsabilityRecommnendation> {

        private boolean value;

        public IsModifies(boolean value) {
            this.value = value;
        }

        public boolean test(UsabilityRecommnendation e) {
            return value == e.isModifies();
        }

    }

    // -----------------------------------------------------------
    // - entityAffected
    // -----------------------------------------------------------

    private final Cache<Integer,Set<UsabilityRecommnendation>> usabilityRecommnendationsByEntityAffectedCache = new Cache<Integer,Set<UsabilityRecommnendation>>(
            new Cache.Factory<Integer,Set<UsabilityRecommnendation>>() {
                public Set<UsabilityRecommnendation> create(Integer entityAffected) {
                    return getEntities(new IsEntityAffected(entityAffected));
                }
            });

    public final Set<UsabilityRecommnendation> getUsabilityRecommnendationsByEntityAffected(int entityAffected) {
        return new HashSet<UsabilityRecommnendation>(usabilityRecommnendationsByEntityAffectedCache.get(entityAffected));
    }
    private Set<Integer> entityAffectedsCache;

    public final Set<Integer> getEntityAffecteds() {
        if (entityAffectedsCache == null) {
            entityAffectedsCache = new HashSet<Integer>();
            for (UsabilityRecommnendation e : getEntities()) {
                entityAffectedsCache.add(e.getEntityAffected());
            }
        }
        return entityAffectedsCache;
    }

    private static class IsEntityAffected implements Predicate<UsabilityRecommnendation> {

        private int value;

        public IsEntityAffected(int value) {
            this.value = value;
        }

        public boolean test(UsabilityRecommnendation e) {
            return e.isEntityAffected(value);
        }

    }

    // -----------------------------------------------------------
    // - usabilityMechanism
    // -----------------------------------------------------------

    private final Cache<scrum.server.project.UsabilityMechanism,Set<UsabilityRecommnendation>> usabilityRecommnendationsByUsabilityMechanismCache = new Cache<scrum.server.project.UsabilityMechanism,Set<UsabilityRecommnendation>>(
            new Cache.Factory<scrum.server.project.UsabilityMechanism,Set<UsabilityRecommnendation>>() {
                public Set<UsabilityRecommnendation> create(scrum.server.project.UsabilityMechanism usabilityMechanism) {
                    return getEntities(new IsUsabilityMechanism(usabilityMechanism));
                }
            });

    public final Set<UsabilityRecommnendation> getUsabilityRecommnendationsByUsabilityMechanism(scrum.server.project.UsabilityMechanism usabilityMechanism) {
        return new HashSet<UsabilityRecommnendation>(usabilityRecommnendationsByUsabilityMechanismCache.get(usabilityMechanism));
    }
    private Set<scrum.server.project.UsabilityMechanism> usabilityMechanismsCache;

    public final Set<scrum.server.project.UsabilityMechanism> getUsabilityMechanisms() {
        if (usabilityMechanismsCache == null) {
            usabilityMechanismsCache = new HashSet<scrum.server.project.UsabilityMechanism>();
            for (UsabilityRecommnendation e : getEntities()) {
                if (e.isUsabilityMechanismSet()) usabilityMechanismsCache.add(e.getUsabilityMechanism());
            }
        }
        return usabilityMechanismsCache;
    }

    private static class IsUsabilityMechanism implements Predicate<UsabilityRecommnendation> {

        private scrum.server.project.UsabilityMechanism value;

        public IsUsabilityMechanism(scrum.server.project.UsabilityMechanism value) {
            this.value = value;
        }

        public boolean test(UsabilityRecommnendation e) {
            return e.isUsabilityMechanism(value);
        }

    }

    // --- valueObject classes ---
    @Override
    protected Set<Class> getValueObjectClasses() {
        Set<Class> ret = new HashSet<Class>(super.getValueObjectClasses());
        return ret;
    }

    @Override
    public Map<String, Class> getAliases() {
        Map<String, Class> aliases = new HashMap<String, Class>(super.getAliases());
        return aliases;
    }

    // --- dependencies ---

    scrum.server.project.ProjectDao projectDao;

    public void setProjectDao(scrum.server.project.ProjectDao projectDao) {
        this.projectDao = projectDao;
    }

    scrum.server.project.UsabilityMechanismDao usabilityMechanismDao;

    public void setUsabilityMechanismDao(scrum.server.project.UsabilityMechanismDao usabilityMechanismDao) {
        this.usabilityMechanismDao = usabilityMechanismDao;
    }

}